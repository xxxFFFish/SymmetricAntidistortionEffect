[gd_scene load_steps=6 format=3 uid="uid://bdna3e3i5g6tx"]

[ext_resource type="Material" uid="uid://dtmprmhrparbn" path="res://material/effect_mask/shader_material_effect_mask_minisize.tres" id="1_8lrao"]
[ext_resource type="Material" uid="uid://b2yioflg8d7ni" path="res://material/effect_mask/shader_material_effect_mask_minisize_split.tres" id="2_tv0wt"]
[ext_resource type="Material" uid="uid://bc3lw7ujt6ve7" path="res://material/effect_mask/shader_material_effect_mask_balance.tres" id="3_34khe"]
[ext_resource type="Material" uid="uid://cosimln5bk4wc" path="res://material/effect_mask/shader_material_effect_mask_free.tres" id="4_jnp62"]

[sub_resource type="GDScript" id="GDScript_tv0wt"]
resource_name = "canvaslayer_antidistortion_effect"
script/source = "extends CanvasLayer

signal texture_model_changed(type: BaseType.TextureModelType)

@export_category(\"Minisize Texture model\")
@export var effect_mask_minisize_material: ShaderMaterial
@export var effect_mask_minisize_split_material: ShaderMaterial

@export_category(\"Balance Texture model\")
@export var effect_mask_balance_material: ShaderMaterial

@export_category(\"Free Texture model\")
@export var effect_mask_Free_material: ShaderMaterial

var effect_mask: ColorRect

var current_map_model: BaseType.MapModelType = BaseType.MapModelType.KEEP_CENTER
var current_texture_model: BaseType.TextureModelType = BaseType.TextureModelType.MINISIZE
var current_split: bool = false

func _ready() -> void:
	effect_mask = self.get_node_or_null(\"%ColorRectEffectMask\")
	if effect_mask == null:
		printerr(\"Get effect mask failed!\")
		return
	
	load_effect_mask_material()

func _input(event: InputEvent) -> void:
	if event.is_action_pressed(\"ui_left\"):
		print_verbose(\"Left pressed\")
		switch_map_model(true)
	elif event.is_action_pressed(\"ui_right\"):
		print_verbose(\"Right pressed\")
		switch_map_model(false)
	elif event.is_action_pressed(\"ui_up\"):
		print_verbose(\"Up pressed\")
		switch_texture_model(true)
		texture_model_changed.emit(current_texture_model)
	elif event.is_action_pressed(\"ui_down\"):
		print_verbose(\"Down pressed\")
		switch_texture_model(false)
		texture_model_changed.emit(current_texture_model)
	elif event.is_action_pressed(\"ui_accept\"):
		print_verbose(\"Accept pressed\")
		switch_split()

func get_map_texture_path(
	map_model: BaseType.MapModelType,
	texture_model: BaseType.TextureModelType,
	split: bool
) -> String:
	match texture_model:
		BaseType.TextureModelType.MINISIZE:
			match map_model:
				BaseType.MapModelType.KEEP_CENTER:
					return \"res://map_texture/map_keep_center_minisize.png\"
				
				BaseType.MapModelType.EXPAND_EDGE:
					return \"res://map_texture/map_expand_edge_minisize.png\"
		
		BaseType.TextureModelType.BALANCE:
			match map_model:
				BaseType.MapModelType.KEEP_CENTER:
					if split:
						return \"res://map_texture/map_keep_center_balance_split.png\"
					else:
						return \"res://map_texture/map_keep_center_balance.png\"
				
				BaseType.MapModelType.EXPAND_EDGE:
					if split:
						return \"res://map_texture/map_expand_edge_balance_split.png\"
					else:
						return \"res://map_texture/map_expand_edge_balance.png\"
		
		BaseType.TextureModelType.FREE:
			match map_model:
				BaseType.MapModelType.KEEP_CENTER:
					if split:
						return \"res://map_texture/map_keep_center_free_split.png\"
					else:
						return \"res://map_texture/map_keep_center_free.png\"
				
				BaseType.MapModelType.EXPAND_EDGE:
					if split:
						return \"res://map_texture/map_expand_edge_free_split.png\"
					else:
						return \"res://map_texture/map_expand_edge_free.png\"
	
	return \"\"

func load_map_texture() -> void:
	var map_texture_path: String = get_map_texture_path(
		current_map_model,
		current_texture_model,
		current_split
	)
	var map_image: Image = load(map_texture_path)
	if map_image == null:
		printerr(\"Get map texture failed!\")
		return
	
	var map_texture: ImageTexture = ImageTexture.create_from_image(map_image)

	if effect_mask != null:
		effect_mask.material.set_shader_parameter(\"Map\", map_texture)

func load_effect_mask_material() -> void:
	var material: ShaderMaterial = null
	match current_texture_model:
		BaseType.TextureModelType.MINISIZE:
			if current_split:
				material = effect_mask_minisize_split_material
			else:
				material = effect_mask_minisize_material
		
		BaseType.TextureModelType.BALANCE:
			material = effect_mask_balance_material
		
		BaseType.TextureModelType.FREE:
			material = effect_mask_Free_material
	
	if material == null:
		printerr(\"Get material failed!\")
		return
	
	effect_mask.material = material
	
	load_map_texture()

func switch_map_model(previous: bool = false) -> void:
	var map_model_index = int(current_map_model)
	if previous:
		map_model_index += int(BaseType.MapModelType.MAX) - 1
	else:
		map_model_index += 1
	
	map_model_index %= BaseType.MapModelType.MAX
	current_map_model = BaseType.MapModelType.values()[map_model_index]
	load_map_texture()

func switch_texture_model(previous: bool = false) -> void:
	var texture_model_index = int(current_texture_model)
	if previous:
		texture_model_index += int(BaseType.TextureModelType.MAX) - 1
	else:
		texture_model_index += 1
	
	texture_model_index %= BaseType.TextureModelType.MAX
	current_texture_model = BaseType.TextureModelType.values()[texture_model_index]
	load_effect_mask_material()

func switch_split() -> void:
	current_split = not current_split
	
	if current_texture_model == BaseType.TextureModelType.MINISIZE:
		load_effect_mask_material()
	else:
		load_map_texture()
"

[node name="CanvaslayerAntidistortionEffect" type="CanvasLayer"]
layer = 20
script = SubResource("GDScript_tv0wt")
effect_mask_minisize_material = ExtResource("1_8lrao")
effect_mask_minisize_split_material = ExtResource("2_tv0wt")
effect_mask_balance_material = ExtResource("3_34khe")
effect_mask_Free_material = ExtResource("4_jnp62")

[node name="ColorRectEffectMask" type="ColorRect" parent="."]
unique_name_in_owner = true
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)
